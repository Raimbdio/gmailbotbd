import telebot
from telebot import types
import json
import time
from datetime import datetime, timedelta

# --- CONSTANTS (CHANGE THESE PLACEHOLDERS) ---
API_TOKEN = '8330994680:AAGzqKp1-E-f_-peG0giaYyO2NcEI2aYbNA'
ADMIN_ID = 7943354448  # Admin ID provided by user
DATA_FILE = 'bot_data.json'
# IMPORTANT: Replace these with actual payment numbers
ADMIN_BKASH_NO = "01774049543" 
ADMIN_NAGAD_NO = "01774049543" 

bot = telebot.TeleBot(API_TOKEN)

# --- GLOBAL DATA STRUCTURES ---
users = {}
orders = {}
visa_mastercards = [] # Stores cards: [{"card": "1234... | 01/25 | 123", "available": True}]

# --- DATA PERSISTENCE ---

def load_data():
    """Loads data from the JSON file."""
    global users, orders, visa_mastercards
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            users = data.get('users', {})
            orders = data.get('orders', {})
            visa_mastercards = data.get('visa_mastercards', [])
    except FileNotFoundError:
        print("Data file not found, starting with empty data.")
    except Exception as e:
        print(f"Error loading data: {e}")

def save_data():
    """Saves data to the JSON file."""
    try:
        data = {
            'users': users,
            'orders': orders,
            'visa_mastercards': visa_mastercards
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"Error saving data: {e}")

load_data()

# --- HELPER FUNCTIONS & MARKUPS ---

def back_markup():
    """Returns a ReplyKeyboardMarkup with the back button."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    return markup

def payment_markup():
    """Returns a ReplyKeyboardMarkup for payment selection."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    return markup

def home_menu(chat_id):
    """Sends the main menu keyboard."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # New buttons
    markup.add("ЁЯТ│ Free Visa/Mastercard")
    markup.add("ЁЯТм Support Admin")
    
    # Existing button
    markup.add("ЁЯОБ Play Point Park On")
    
    bot.send_message(chat_id, "ЁЯПа ржкрзНрж░ржзрж╛ржи ржорзЗржирзБ:", reply_markup=markup)

def admin_required(func):
    """Decorator to restrict access to admin only."""
    def wrapper(message):
        if message.chat.id == ADMIN_ID:
            func(message)
        else:
            bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐ред")
    return wrapper

# --- CORE HANDLERS ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """Handles the /start command and initializes user data."""
    user_id = str(message.from_user.id)
    if user_id not in users:
        # Initialize card_claims for the new user
        users[user_id] = {"card_claims": []} 
        save_data()
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
def back_to_home(message):
    """Clears step handlers and returns to the main menu."""
    bot.clear_step_handler(message)
    home_menu(message.chat.id)

# --- NEW FEATURE: SUPPORT ADMIN ---

@bot.message_handler(func=lambda m: m.text == "ЁЯТм Support Admin")
def support_handler(message):
    """Displays admin contact information."""
    support_info = f"""
тД╣я╕П **рж╕рж╛ржкрзЛрж░рзНржЯ рждржерзНржп:**

ржПржбржорж┐ржи ржЖржЗржбрж┐: **@Raimadmin**
рж╣рзЛржпрж╝рж╛ржЯрж╕ржЕрзНржпрж╛ржк ржиржорзНржмрж░: **01774049543**

ржпрзЗржХрзЛржирзЛ ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
"""
    bot.send_message(message.chat.id, support_info, parse_mode="Markdown")

# --- NEW FEATURE: FREE CARD SYSTEM ---

def check_daily_limit(user_id):
    """Checks if the user has claimed 5 cards today."""
    today_date = datetime.now().strftime("%Y-%m-%d")
    
    # Filter claims only for today
    today_claims = [
        c for c in users.get(user_id, {}).get("card_claims", []) 
        if c.get("date") == today_date
    ]
    return len(today_claims)

@bot.message_handler(func=lambda m: m.text == "ЁЯТ│ Free Visa/Mastercard")
def free_card_handler(message):
    """Handles the free card claim process with a daily limit of 5."""
    user_id = str(message.from_user.id)
    
    if user_id not in users: 
        users[user_id] = {"card_claims": []}
    
    claims_today = check_daily_limit(user_id)
    
    if claims_today >= 5:
        bot.send_message(message.chat.id, f"тЭМ ржжрзБржГржЦрж┐ржд! ржЖржкржирж┐ ржЖржЬржХрзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ **рзлржЯрж┐ ржХрж╛рж░рзНржбрзЗрж░ ржжрзИржирж┐ржХ рж╕рзАржорж╛** ржкрзВрж░ржг ржХрж░рзЗржЫрзЗржиред ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
        
    # Find the first available card
    available_card_index = -1
    for i, card_data in enumerate(visa_mastercards):
        if card_data.get("available", True) is True:
            available_card_index = i
            break
            
    if available_card_index == -1:
        bot.send_message(message.chat.id, "ЁЯШФ ржжрзБржГржЦрж┐ржд! ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржХрзЛржирзЛ ржлрзНрж░рж┐ ржХрж╛рж░рзНржб ржоржЬрзБржд ржирзЗржЗред ржПржбржорж┐ржиржХрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")
        return

    # Claim the card
    claimed_card = visa_mastercards[available_card_index]
    claimed_card_number = claimed_card["card"]
    
    # Mark as unavailable
    visa_mastercards[available_card_index]["available"] = False
    
    # Update user claims
    today_date = datetime.now().strftime("%Y-%m-%d")
    users[user_id]["card_claims"].append({
        "card": claimed_card_number,
        "date": today_date,
        "time": time.time()
    })
    
    save_data()
    
    remaining_claims = 5 - (claims_today + 1)
    
    response_msg = f"""
тЬЕ ржХрж╛рж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржжрж╛ржмрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯТ│ **ржЖржкржирж╛рж░ ржлрзНрж░рж┐ ржХрж╛рж░рзНржб:**
`{claimed_card_number}`

тЪая╕П **ржжрзНрж░рж╖рзНржЯржмрзНржп:** ржПржЗ ржХрж╛рж░рзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпред

ржЖржкржирж┐ ржЖржЬржХрзЗ ржЖрж░ржУ **{remaining_claims}** ржЯрж┐ ржХрж╛рж░рзНржб ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗржиред
"""
    bot.send_message(message.chat.id, response_msg, parse_mode="Markdown")

# --- EXISTING: Play Point Park On Flow ---

@bot.message_handler(func=lambda m: m.text == "ЁЯОБ Play Point Park On")
def play_point_menu(message):
    user_id = str(message.from_user.id)
    if user_id in users and users[user_id].get("is_blocked"): return

    options = """
ЁЯМН ржжрзЗрж╢ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:

ЁЯЗ║ЁЯЗ╕ USA
ЁЯЗ╣ЁЯЗ╝ Taiwan
ЁЯЗмЁЯЗз UK
ЁЯЗ░ЁЯЗ╖ South Korean

ЁЯТб ржкрзНрж░рждрж┐ржЯрж┐ Park On-ржПрж░ ржЬржирзНржп 20 ржЯрж╛ржХрж╛ ржЦрж░ржЪ рж╣ржмрзЗ
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("ЁЯЗ║ЁЯЗ╕ USA", "ЁЯЗ╣ЁЯЗ╝ Taiwan", "ЁЯЗмЁЯЗз UK", "ЁЯЗ░ЁЯЗ╖ South Korean", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    msg = bot.send_message(message.chat.id, options, reply_markup=markup)
    bot.register_next_step_handler(msg, process_play_point_country)

def process_play_point_country(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    country = message.text
    user_id = str(message.from_user.id)
    if user_id not in users: users[user_id] = {} # Safety check
    
    users[user_id]["play_point_country"] = country
    quantity_msg = f"""
ЁЯФв ржХрждржЧрзБрж▓рзЛ Park On ржЪрж╛ржи?

ЁЯТб ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (рж╕ржВржЦрзНржпрж╛):
"""
    msg = bot.send_message(message.chat.id, quantity_msg, reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_play_point_quantity)

def process_play_point_quantity(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
        
        user_id = str(message.from_user.id)
        if user_id not in users: return home_menu(message.chat.id) # Session check

        users[user_id]["play_point_quantity"] = quantity
        total_price = quantity * 20
        users[user_id]["play_point_price"] = total_price
        
        details_msg = f"""
ЁЯТ░ ржорзЛржЯ ржорзВрж▓рзНржп: {total_price} ржЯрж╛ржХрж╛

ржПржЦржи ржЖржкржирж┐ ржпрзЗ Gmail/Password-ржЧрзБрж▓рзЛрждрзЗ Park On ржХрж░рждрзЗ ржЪрж╛ржи рж╕рзЗржЧрзБрж▓рзЛ ржПржХрж╕рж╛ржерзЗ рж▓рж┐ржЦрзБржи:
(ржкрзНрж░рждрж┐ рж▓рж╛ржЗржирзЗ ржПржХржЯрж┐ Gmail/Password)

ржлрж░ржорзНржпрж╛ржЯ:
example1@gmail.com/password1
example2@gmail.com/password2
"""
        msg = bot.send_message(message.chat.id, details_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_play_point_details)
        
    except ValueError:
        error_msg = """
тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛! рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_play_point_quantity)

def process_play_point_details(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    user_id = str(message.from_user.id)
    if user_id not in users or "play_point_price" not in users[user_id]: 
        bot.send_message(message.chat.id, "тЭМ рж╕рзЗрж╢ржи ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░рзНржб! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return home_menu(message.chat.id)
        
    play_point_details = message.text
    users[user_id]["play_point_details"] = play_point_details

    order_summary = f"""
ЁЯУЭ ржЕрж░рзНржбрж╛рж░ рж╕рж╛рж░рж╛ржВрж╢:

ЁЯМН Country: {users[user_id]["play_point_country"]}
ЁЯФв Quantity: {users[user_id]["play_point_quantity"]} ржЯрж┐
ЁЯТ░ ржорзЛржЯ ржорзВрж▓рзНржп: {users[user_id]["play_point_price"]} TK

ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    # Use the message object from the previous step to register the next step
    bot.send_message(message.chat.id, order_summary, reply_markup=payment_markup())
    bot.register_next_step_handler(message, process_play_point_payment)

def process_play_point_payment(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    user_id = str(message.from_user.id)
    if user_id not in users or "play_point_price" not in users[user_id]: 
        bot.send_message(message.chat.id, "тЭМ рж╕рзЗрж╢ржи ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░рзНржб! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return home_menu(message.chat.id)
        
    user_data = users[user_id]
    
    if message.text not in ["ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad"]:
        error_msg = "тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:"
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=payment_markup())
        bot.register_next_step_handler(msg, process_play_point_payment)
        return
        
    method = "Bkash" if "Bkash" in message.text else "Nagad"
    payment_number = ADMIN_BKASH_NO if method == "Bkash" else ADMIN_NAGAD_NO
    price = user_data["play_point_price"]
    
    payment_instructions = f"""
ЁЯТ│ {method} ржП ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:

ЁЯУ▒ Number: {payment_number}
ЁЯТ░ Amount: {price} TK
ЁЯУЭ Reference: PPON{user_id}

тЪая╕П ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ Transaction ID ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржи

ЁЯУи ржПржЦржи ржЖржкржирж╛рж░ Transaction ID рж▓рж┐ржЦрзБржи:
"""
    msg = bot.send_message(message.chat.id, payment_instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: confirm_play_point_order(m, method, price))

def confirm_play_point_order(message, method, price):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
        
    txn_id = message.text
    user_id = str(message.from_user.id)
    if user_id not in users or "play_point_details" not in users[user_id]: 
        bot.send_message(message.chat.id, "тЭМ рж╕рзЗрж╢ржи ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░рзНржб! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return home_menu(message.chat.id)
        
    order_id = f"PPON{int(time.time())}{user_id}"
    orders[order_id] = {
        "user_id": user_id,
        "service": "Play Point Park On",
        "country": users[user_id]["play_point_country"],
        "quantity": users[user_id]["play_point_quantity"],
        "details": users[user_id]["play_point_details"],
        "price": price,
        "method": method,
        "txn_id": txn_id,
        "status": "pending",
        "username": message.from_user.username
    }
    save_data() # Save the new order

    markup = types.InlineKeyboardMarkup()
    # Inline button for admin delivery
    markup.add(types.InlineKeyboardButton("тЬЕ Deliver Order", callback_data=f"deliver_pp_{order_id}")) 

    admin_msg = f"""
ЁЯОБ **ржирждрзБржи Play Point Park On ржЕрж░рзНржбрж╛рж░** ЁЯОБ

ЁЯУж Order ID: `{order_id}`
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: `{user_id}`
ЁЯМН Country: {orders[order_id]["country"]}
ЁЯФв Quantity: {orders[order_id]["quantity"]} ржЯрж┐
ЁЯТ░ Amount: {price} TK
ЁЯТ│ Method: {method}
ЁЯУЭ Txn ID: `{txn_id}`
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}

ЁЯУй Gmail Details:
{orders[order_id]["details"]}
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup, parse_mode="Markdown")

    user_confirmation = f"""
тЬЕ **ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯУж Order ID: `{order_id}`
ЁЯОБ Service: Play Point Park On
ЁЯТ░ Paid: {price} TK

ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзз-рззрзи ржШржирзНржЯрж╛

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation, parse_mode="Markdown")
    home_menu(message.chat.id)


# --- ADMIN PANEL ---

@bot.message_handler(commands=['admin'])
@admin_required
def admin_menu(message):
    """Displays the admin control panel menu."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("/addcard", "/removecard", "/broadcast", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    
    card_count = sum(1 for card in visa_mastercards if card.get("available", True))
    pending_count = len([o for o in orders.values() if o['status'] == 'pending'])
    
    msg = f"""
ЁЯСС **ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓** ЁЯСС
ржорзБржЬрзБржд ржлрзНрж░рж┐ ржХрж╛рж░рзНржб: **{card_count}** ржЯрж┐
ржкрзЗржирзНржбрж┐ржВ ржЕрж░рзНржбрж╛рж░: **{pending_count}** ржЯрж┐

ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(message.chat.id, msg, reply_markup=markup, parse_mode="Markdown")

# --- ADMIN: ADD CARD ---

@bot.message_handler(commands=['addcard'])
@admin_required
def add_card_start(message):
    """Starts the process for adding new free cards."""
    msg = bot.send_message(message.chat.id, 
                           "ЁЯТ│ ржирждрзБржи ржнрж┐рж╕рж╛/ржорж╛рж╕рзНржЯрж╛рж░ржХрж╛рж░рзНржбрзЗрж░ рждржерзНржп рж▓рж┐ржЦрзБржиред\n\nржлрж░ржорзНржпрж╛ржЯ (ржкрзНрж░рждрж┐ рж▓рж╛ржЗржирзЗ ржПржХржЯрж┐ ржХрж╛рж░рзНржб):\nCard Number | Exp Date | CVV\n\nржЙржжрж╛рж╣рж░ржг:\n1234-5678-9012-3456 | 01/25 | 123", 
                           reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_add_card)

def process_add_card(message):
    """Processes the input card data and adds them to inventory."""
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        return admin_menu(message)
        
    new_cards = []
    lines = message.text.strip().split('\n')
    
    for line in lines:
        card_data = line.strip()
        if card_data:
            # Check if card already exists (basic deduplication)
            if not any(c['card'] == card_data and c['available'] for c in visa_mastercards):
                new_cards.append({"card": card_data, "available": True})
            
    if new_cards:
        visa_mastercards.extend(new_cards)
        save_data()
        bot.send_message(message.chat.id, f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ **{len(new_cards)}** ржЯрж┐ ржХрж╛рж░рзНржб ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "тЪая╕П ржХрзЛржирзЛ ржХрж╛рж░рзНржб ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ ржЕржержмрж╛ ржХрж╛рж░рзНржбржЧрзБрж▓рзЛ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржоржЬрзБржд ржЖржЫрзЗред ржлрж░ржорзНржпрж╛ржЯ ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ ржирж╛ ржжрзЗржЦрзБржиред")
        
    admin_menu(message)

# --- ADMIN: REMOVE CARD ---

@bot.message_handler(commands=['removecard'])
@admin_required
def remove_card_start(message):
    """Starts the process for removing an available card by index."""
    available_cards_info = [
        (i, card["card"]) 
        for i, card in enumerate(visa_mastercards) 
        if card.get("available", True)
    ]
    
    if not available_cards_info:
        bot.send_message(message.chat.id, "тЭМ ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ ржоржЬрзБржд ржлрзНрж░рж┐ ржХрж╛рж░рзНржб ржирзЗржЗ ржпрж╛ ржЖржкржирж┐ рж░рж┐ржорзБржн ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
        return admin_menu(message)
        
    # Create a list for display, using 1-based indexing
    card_list = "\n".join([f"**{i+1}**: `{card_str}`" for i, (_, card_str) in enumerate(available_cards_info)])
    
    msg_text = f"""
ЁЯЧСя╕П **ржХрж╛рж░рзНржб рж░рж┐ржорзБржн ржХрж░рзБржи**

ржирж┐ржЪрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ ржпрзЗ ржХрж╛рж░рзНржбржЯрж┐ рж░рж┐ржорзБржн ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛рж░ ржХрзНрж░ржорж┐ржХ рж╕ржВржЦрзНржпрж╛ (index) рж▓рж┐ржЦрзБржи:

{card_list}

тЭМ рж░рж┐ржорзБржн ржХрж░рждрзЗ ржирж╛ ржЪрж╛ржЗрж▓рзЗ `cancel` рж▓рж┐ржЦрзЗ ржкрж╛ржарж╛ржиред
"""
    msg = bot.send_message(message.chat.id, msg_text, parse_mode="Markdown", reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_remove_card)

def process_remove_card(message):
    """Processes the index input to remove the card."""
    if message.text.lower() == "cancel" or message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.send_message(message.chat.id, "ЁЯЧСя╕П ржХрж╛рж░рзНржб рж░рж┐ржорзБржн ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рж▓рзЛред")
        return admin_menu(message)
        
    try:
        index_to_remove = int(message.text.strip()) - 1
        
        # Get the list of actual indices that are available
        available_indices = [i for i, card in enumerate(visa_mastercards) if card.get("available", True)]
        
        if 0 <= index_to_remove < len(available_indices):
            actual_index = available_indices[index_to_remove]
            removed_card = visa_mastercards.pop(actual_index)
            save_data()
            bot.send_message(message.chat.id, f"тЬЕ ржХрж╛рж░рзНржб **`{removed_card['card']}`** рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐ржорзБржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", parse_mode="Markdown")
        else:
            msg = bot.send_message(message.chat.id, "тЭМ ржЕржмрзИржз ржХрзНрж░ржорж┐ржХ рж╕ржВржЦрзНржпрж╛ред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ржЯрж┐ рж▓рж┐ржЦрзБржи:")
            bot.register_next_step_handler(msg, process_remove_card)
            return
            
    except ValueError:
        msg = bot.send_message(message.chat.id, "тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ ржХрзНрж░ржорж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")
        bot.register_next_step_handler(msg, process_remove_card)
        return

    admin_menu(message)

# --- ADMIN: BROADCAST SYSTEM ---

@bot.message_handler(commands=['broadcast'])
@admin_required
def broadcast_start(message):
    """Starts the broadcast command flow."""
    msg = bot.send_message(message.chat.id, 
                           "ЁЯУг ржЖржкржирж┐ ржпрзЗ ржорзЗрж╕рзЗржЬржЯрж┐ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛ ржЯрзЗржХрзНрж╕ржЯ, ржлржЯрзЛ ржмрж╛ ржнрж┐ржбрж┐ржУ рж╕рж╣ ржкрж╛ржарж╛ржиред\n\nтЭМ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ `cancel` рж▓рж┐ржЦрзЗ ржкрж╛ржарж╛ржиред", 
                           reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_broadcast)

def process_broadcast(message):
    """Processes the broadcast message and sends it to all users."""
    if message.text and (message.text.lower() == "cancel" or message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи"):
        bot.send_message(message.chat.id, "ЁЯУг ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рж▓рзЛред")
        return admin_menu(message)
        
    all_user_ids = list(users.keys())
    sent_count = 0
    
    # Determine message type and send
    if message.text:
        send_func = bot.send_message
        args = (message.text,)
    elif message.photo:
        send_func = bot.send_photo
        args = (message.photo[-1].file_id, message.caption)
    elif message.video:
        send_func = bot.send_video
        args = (message.video.file_id, message.caption)
    else:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржХрзЛржирзЛ ржЯрзЗржХрзНрж╕ржЯ, ржЫржмрж┐ ржмрж╛ ржнрж┐ржбрж┐ржУ ржжрзЗржиржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return admin_menu(message)

    for user_id in all_user_ids:
        try:
            # Prevent sending to Admin himself unless absolutely necessary
            if int(user_id) == ADMIN_ID:
                continue

            send_func(user_id, *args)
            sent_count += 1
            time.sleep(0.1) # Rate limit protection
        except Exception:
            # User blocked the bot, skip
            pass
        
    bot.send_message(message.chat.id, f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ **{sent_count}** ржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", parse_mode="Markdown")
    admin_menu(message)


# --- NEW FEATURE: PLAY POINT DELIVERY SYSTEM (Callback Handler) ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('deliver_pp_'))
@admin_required
def deliver_play_point_order(call):
    """Handles the 'Deliver' inline button for Park On orders."""
    bot.answer_callback_query(call.id, "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    order_id = call.data.split('_')[2]
    
    if order_id not in orders:
        bot.send_message(call.message.chat.id, f"тЭМ ржЕрж░рзНржбрж╛рж░ ID **{order_id}** ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return

    order = orders[order_id]
    
    if order["status"] == "delivered":
        bot.edit_message_text(f"тЪая╕П ржЕрж░рзНржбрж╛рж░ ID `{order_id}` ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржбрзЗрж▓рж┐ржнрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", call.message.chat.id, call.message.message_id, parse_mode="Markdown")
        return
        
    # Admin is prompted to provide delivery details
    msg = bot.send_message(call.message.chat.id, 
                           f"ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ рждржерзНржп рж▓рж┐ржЦрзБржи Order ID **`{order_id}`** ржПрж░ ржЬржирзНржпред ржПржЗ ржорзЗрж╕рзЗржЬржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред", 
                           reply_markup=back_markup(), parse_mode="Markdown")
    
    # Use lambda to pass the order_id and the original admin message ID to the next step
    bot.register_next_step_handler(msg, lambda m: finalize_delivery(m, order_id, call.message.message_id))


def finalize_delivery(message, order_id, original_message_id):
    """Finalizes the delivery, notifies the user, and updates the admin's message."""
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.send_message(message.chat.id, "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рж▓рзЛред")
        return admin_menu(message)

    delivery_message = message.text
    
    if order_id not in orders:
        bot.send_message(message.chat.id, f"тЭМ ржЕрж░рзНржбрж╛рж░ ID **{order_id}** ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return admin_menu(message)
    
    order = orders[order_id]
    user_id = order["user_id"]
    
    # 1. Update order status
    orders[order_id]["status"] = "delivered"
    orders[order_id]["delivery_message"] = delivery_message
    save_data()
    
    # 2. Notify the user
    user_msg = f"""
тЬЕ **ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржбрзЗрж▓рж┐ржнрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯУж Order ID: `{order_id}`
ЁЯОБ Service: {order["service"]}

***ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ ржмрж┐ржмрж░ржг:***
{delivery_message}

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    try:
        bot.send_message(user_id, user_msg, parse_mode="Markdown")
    except Exception:
        bot.send_message(message.chat.id, f"тЪая╕П ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ({user_id}) ржмржЯ ржмрзНрж▓ржХ ржХрж░рзЗ ржжрж┐ржпрж╝рзЗржЫрзЗред")
        
    # 3. Update the admin's original message
    admin_confirmation_text = f"""
тЬЕ **DELIVERED** тЬЕ
ржЕрж░рзНржбрж╛рж░ ID `{order_id}` рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
ЁЯСд User ID: `{user_id}` | User: @{order.get('username', 'N/A')}
---
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ ржмрж┐ржмрж░ржг:
{delivery_message}
"""
    try:
        bot.edit_message_text(admin_confirmation_text, message.chat.id, original_message_id, parse_mode="Markdown")
    except Exception:
        # Ignore error if message is too old/modified
        pass

    bot.send_message(message.chat.id, "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗред")
    admin_menu(message)


# --- BOT POLLING ---

if __name__ == '__main__':
    print("Bot is starting...")
    # Optional: Log the admin URL for easy access (replace with your bot username)
    print(f"Admin, start your chat with /start and then use /admin.")
    
    # Make sure to handle potential network errors gracefully
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"Polling error: {e}")
            time.sleep(15) # Wait before retrying to prevent rapid loop

